//
//  UIViewController+MRUIVC.m
//  TestMethodSwizzling
//
//  Created by Mac on 2017/12/14.
//  Copyright ¬© 2017Âπ¥ Mix_Reality. All rights reserved.
//

#import "UIViewController+MRUIVC.h"
#import <objc/runtime.h>
#import "MRCommonOther.h"
#import "MRCommonTime.h"

#define kDocuments                    [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"]
/// Êï∞ÁªÑÊñá‰ª∂ÁöÑË∑ØÂæÑ
#define kListPath                         [NSString stringWithFormat:@"%@/Listen/listArray.plist", kDocuments]

@implementation UIViewController (MRUIVC)

+ (void)load {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        Class class = [self class];

        /// Êú™ÊîπÂä®ÁöÑÊñπÊ≥ï
        SEL oldViewWillAppearSEL = @selector(viewWillAppear:);
        /// ÊîπÂä®ÂêéÁöÑÊñπÊ≥ï
        SEL newViewWillAppearSEL = @selector(mr_viewWillAppear:);
        /// Ëé∑ÂèñÊóßÊñπÊ≥ï
        Method oldViewWillAppearMethod = class_getInstanceMethod(class, oldViewWillAppearSEL);
        /// Ëé∑ÂèñÊñ∞ÊñπÊ≥ï
        Method newViewWillAppearMethod = class_getInstanceMethod(class, newViewWillAppearSEL);
        /// Ê£ÄÊµãÊòØÂê¶Â∑≤ÁªèÊ∑ªÂä†ËØ•ÊñπÊ≥ï‰∫Ü
        BOOL didAddMethod = class_addMethod(class, oldViewWillAppearSEL, method_getImplementation(newViewWillAppearMethod), method_getTypeEncoding(newViewWillAppearMethod));
        if (didAddMethod)           /// Â∑≤ÁªèÊ∑ªÂä†Â∞±ÊõøÊç¢ÊñπÊ≥ï
            class_replaceMethod(class, newViewWillAppearSEL, method_getImplementation(oldViewWillAppearMethod), method_getTypeEncoding(oldViewWillAppearMethod));
        else                                 /// Êú™Ê∑ªÂä†Â∞±ÊõøÊç¢ÊñπÊ≥ï
            method_exchangeImplementations(oldViewWillAppearMethod, newViewWillAppearMethod);
        
        /// ÊõøÊç¢ viewWillDisAppear
        SEL oldViewWillDisAppearSEL = @selector(viewWillDisappear:);
        SEL newViewWillDisAppearSEL = @selector(mr_viewWillDisappear:);
        Method oldViewWillDisAppearMethod = class_getInstanceMethod(class, oldViewWillDisAppearSEL);
        Method newViewWillDisAppearMethod = class_getInstanceMethod(class, newViewWillDisAppearSEL);
        BOOL didAddDisAppearMethod = class_addMethod(class, oldViewWillDisAppearSEL, method_getImplementation(newViewWillDisAppearMethod), method_getTypeEncoding(newViewWillDisAppearMethod));
        if(didAddDisAppearMethod)
            class_replaceMethod(class, newViewWillDisAppearSEL, method_getImplementation(oldViewWillDisAppearMethod), method_getTypeEncoding(oldViewWillDisAppearMethod));
        else
            method_exchangeImplementations(oldViewWillDisAppearMethod, newViewWillDisAppearMethod);
        
    });
}

/// MARK: Method Swizzling
- (void)mr_viewWillAppear:(BOOL)animated {
    [self mr_viewWillAppear:animated];
   
    NSString *time = [MRCommonTime currentDateWithFormat:@"yyyy:MM:dd HH:mm:ss"];
    NSString *string = [NSString stringWithFormat:@"[%@]: %@ appear üëª", time,  NSStringFromClass([self class])];
    [self wirteWithString:string];
}

- (void)mr_viewWillDisappear:(BOOL)animation{
    [self mr_viewWillDisappear:animation];
    
    NSString *time = [MRCommonTime currentDateWithFormat:@"yyyy:MM:dd HH:mm:ss"];
    NSString *string = [NSString stringWithFormat:@"[%@]: %@ disappear ü¶ã", time, NSStringFromClass([self class])];
    [self wirteWithString:string];
}

/// MARK: ÂÜôÊñá‰ª∂
- (void)wirteWithString:(NSString *)string{
    
    NSString *path = [NSString stringWithFormat:@"%@/Listen",  kDocuments];
    /// ÂÖàÂàõÂª∫Êñá‰ª∂Â§π
    [MRCommonOther creatFolderWithFile:path];
    
    NSMutableArray *array = [[NSMutableArray alloc] initWithContentsOfFile:kListPath];
    if(!array){     /// ËøòÊ≤°ÊúâÂàõÂª∫Êìç‰ΩúËÆ∞ÂΩï
        array = [NSMutableArray array];
        NSString *newTxtPath = [path stringByAppendingPathComponent:@"1"];
        [array addObject:@"1"];
        newTxtPath = [newTxtPath stringByAppendingString:@".txt"];
        [MRCommonOther creatFileWithPath:newTxtPath isCover:NO];
    }
    
    /// Ëé∑ÂèñÊúÄÂêé‰∏Ä‰∏™Êñá‰ª∂ÁöÑÂ§ßÂ∞è
    NSString *filePath = [NSString stringWithFormat:@"%@/%@.txt", path, array.lastObject];
    long long fileSize = [MRCommonOther fileSizeAtPath:filePath];
    if(fileSize > 5 * 1000 * 1000){     /// ÈáçÊñ∞ÂàõÂª∫‰∏Ä‰∏™
        NSString *newLastName = [NSString stringWithFormat:@"%ld", [array.lastObject integerValue] + 1];
        [array addObject:newLastName];
        NSString *newTxtPath = [path stringByAppendingPathComponent:newLastName];
        newTxtPath = [newTxtPath stringByAppendingString:@".txt"];
        [MRCommonOther creatFileWithPath:newTxtPath isCover:NO];
    }
    
    /// Ëé∑ÂèñÊúÄÂêé‰∏Ä‰∏™Êñá‰ª∂
    path = [NSString stringWithFormat:@"%@/%@.txt", path, array.lastObject];
    NSData *data = [[NSData alloc] initWithContentsOfFile:path];
    NSMutableString *oldString = [[NSMutableString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    NSString *newString = [NSString stringWithFormat:@"%@\n", string];
    oldString = [oldString stringByAppendingString:newString].mutableCopy;
    [oldString writeToFile:path atomically:YES encoding:NSUTF8StringEncoding error:NULL];
    
    [array writeToFile:kListPath atomically:YES];
}

@end
